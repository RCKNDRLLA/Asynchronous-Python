# Описание Задачи и входящие данные:
# Напишите асинхронный код для выполнения множества задач и подзадач с учетом ограниченного времени на их выполнение. 

# Каждая задача состоит из нескольких этапов (подзадач). Особое внимание уделяется контролю времени выполнения каждой задачи, чтобы обеспечить их своевременное завершение. По условию на выполнение каждой задачи может быть выделено максимум 5 секунд.

# Ниже в переменной tasks_dependencies указаны все задачи и подзадачи, а также время выполнения каждой подзадачи.

# tasks_dependencies = {}
 
# Общее задание:
# Реализуйте асинхронное выполнение этапов каждой задачи, используя функцию asyncio.gather(). Этапы задачи должны запускаться пачками для каждой задачи, асинхронно в пределах задачи. 
т.е. для задачи "Подготовка_окружения" отправленная пачка задач в цикл событий должна быть следующая:

# ?{"название": "Настройка виртуального окружения", "время": 1},
# {"название": "Установка базовых зависимостей", "время": 2},
# {"название": "Настройка системы контроля версий", "время": 3},
# {"название": "Проверка сетевых настроек", "время": 4},
# {"название": "Клонирование основной ветки", "время": 4},
# {"название": "Проверка последних изменений", "время": 6},
# {"название": "Проверка локальных зависимостей", "время": 8}
?
# Общее время на выполнение всех этапов каждой задачи должно быть не более 5 секунд.

# При этом сами задачи могут выполняться как последовательно, так и одновременно. 

# ссылка на задачу - https://stepik.org/lesson/933681/step/10?unit=939580

import asyncio

# Словарь tasks_dependencies = {} вшит в задачу, вставлять его в решение не нужно.
async def execute_subtask(task_name, duration):
    if duration <= 5:
        await asyncio.sleep(duration)
        print(f'Подзадача: {task_name} успела выполниться в срок, за {duration} сек.')
        return True
    else:
        print(f'Подзадача: {task_name} не успела выполниться в срок, за {duration} сек.')
        return False
    
async def execute_task(task_name, subtasks):
    result = await asyncio.gather(*(execute_subtask(subtask['название'], subtask['время']) for subtask in subtasks))
    if all(result):
        print(f'Задача: {task_name} = все подзадачи выполнены.')
    else:
        print(f'Задача: {task_name} не выполнилась в срок, т.к. одна или несколько подзадач заняли слишком много времени.')


async def main():
    for i in tasks_dependencies:
        await execute_task(i, tasks_dependencies[i]['этапы'])


asyncio.run(main())