# В вашем арсенале находится список из 10 заклинаний, каждое из которых требует разное время для успешного каста. Время каста указано в секундах и варьируется от заклинания к заклинанию.

# Пять отважных учеников по имени Алара, Бренн, Сирил, Дариа и Элвин выходят на арену одновременно, чтобы продемонстрировать своё мастерство.

# Максимальное время каста: Каждый ученик должен выполнить заклинание в пределах 5 секунд.
# Мудрый учитель знает возможности своих учеников и тайком накладывает защитный щит, который позволит ученику успешно завершить каст, несмотря на превышение времени.

# Ваша задача - написать асинхронный код, который позволит всем ученикам одновременно попытаться скастовать все заклинания из списка. Используйте asyncio.wait_for() для ограничения времени каста и asyncio.shield() для гарантии успешного завершения заклинания в качестве помощи учителя. Убедитесь, что ваш код корректно обрабатывает исключения и выводит соответствующие сообщения о результате каждой попытки каста.

# ссылка на задачу - https://stepik.org/lesson/933680/step/12?unit=939579


import asyncio


spells = {
    "Огненный шар": 3,
    "Ледяная стрела": 2,
    "Щит молний": 4,
    "Телепортация": 7
}

students = ["Алара", "Бренн", "Сирил", "Дариа", "Элвин"]

max_cast_time = 5  # Секунды

async def cast_spell(student, spell, cast_time):
    try:
        await asyncio.wait_for(asyncio.shield(asyncio.sleep(cast_time)), timeout=max_cast_time)
        return f"{student} успешно кастует {spell} за {cast_time} сек."
    except asyncio.TimeoutError:
        await asyncio.sleep(cast_time)
        return f"Ученик {student} не справился с заклинанием {spell}, и учитель применил щит. {student} успешно завершает заклинание с помощью shield."



async def main():
    d = [(student, *spell) for spell in spells.items() for student in students]
    tasks = [asyncio.create_task(cast_spell(student, spell, cast_time)) for student, spell, cast_time in d]
    result = await asyncio.gather(*tasks)
    print(*result, sep='\n')


asyncio.run(main())