# В большинстве примеров в первой части курса мы используем метод asyncio.sleep() для имитации задержки реальных IO операций, которые будут изучаться во второй части курса.

# При этом дополнительная задержка может вводиться специально. Регулярные опросы с использованием фиксированных задержек могут применяться в системах, не требующих моментального отклика, например в почтовых клиентах. 

# Вам необходимо написать программу для почтового клиента, которая проверяет наличие новых писем на почтовом сервере. Для этого вам уже предоставлен класс MailServer, который содержит методы для проверки наличия новых писем и загрузки новых писем.

# Входящие данные:
# Класс MailServer уже доступен и имеет следующие методы:
# check_for_new_mail(): асинхронный метод, который проверяет наличие новых писем. В 10% случаев возвращает сообщение об ошибке "Ошибка при проверке новых писем.". В остальных случаях метод случайным образом возвращает True (если есть новые письма) или False (если новых писем нет).
# fetch_new_mail(): асинхронный метод, который возвращает новое письмо. Оно выбирается случайным образом из списка.

# ссылка на задачу - https://stepik.org/lesson/933678/step/12?unit=939577

import asyncio
import random

# Не менять.
random.seed(1)

class MailServer:
    def __init__(self):
        self.mailbox = ["Привет!", "Встреча в 15:00", "Важное уведомление", "Реклама"]

    async def check_for_new_mail(self):
        if random.random() < 0.1:
            return "Ошибка при проверке новых писем."
        return random.choice([True, False])

    async def fetch_new_mail(self):
        mail = random.choice(self.mailbox)
        return f"Новое письмо: {mail}"

# Тут пишите ваш код 
async def check_mail(server):
    while True:
        await asyncio.sleep(1)
        check = await server.check_for_new_mail()
        if check == "Ошибка при проверке новых писем.":
            print("Ошибка при проверке новых писем.")
            break
        else:
            if check:
                result = await server.fetch_new_mail()
                print(result)
            else:
                print('Новых писем нет.')


async def main():
    server = MailServer()
    await check_mail(server)


asyncio.run(main())