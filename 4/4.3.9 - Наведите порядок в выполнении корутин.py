# Ќапишите код дл€ выполнени€ трех корутин.  ажда€ корутина должна выводить два сообщени€, с задержкой между первым и вторым сообщени€ми, определенной с помощью await asyncio.sleep(). ¬рем€ задержки должно быть разным дл€ каждой корутины, чтобы продемонстрировать вли€ние времени сна на пор€док выполнени€ задач.

# ѕоскольку все корутины запускаютс€ конкурентно с помощью gather(), первые сообщени€ вывод€тс€ сразу же, а вторые Ч  уже после задержки, заданной в каждой корутине. Ёто упражнение помогает пон€ть, как можно управл€ть пор€дком выполнени€ асинхронных операций с помощью asyncio.sleep().

# ¬аша задача Ч пон€ть, какие значени€ времени задержки необходимо подобрать, чтобы получить правильный результат, и указать их дл€ каждой корутины.
# * »змен€ть пор€док следовани€ корутин в asyncio.gather() не нужно!
# ¬ывод сообщений должен быть в строгом пор€дке.

# ссылка на задачу - https://stepik.org/lesson/933678/step/9?unit=939577


import asyncio

async def coroutine_1():
    print("ѕервое сообщение от корутины 1")
    await asyncio.sleep(3)
    print("¬торое сообщение от корутины 1")

async def coroutine_2():
    print("ѕервое сообщение от корутины 2")
    await asyncio.sleep(2)
    print("¬торое сообщение от корутины 2")

async def coroutine_3():
    print("ѕервое сообщение от корутины 3")
    await asyncio.sleep(1)
    print("¬торое сообщение от корутины 3")

async def main():
    await asyncio.gather(
        coroutine_1(),
        coroutine_2(),
        coroutine_3(),
    )

asyncio.run(main())