# Это модификация прошлой задачи, теперь каждая корутина имеет три задержки и четыре принта. Нужно установить задержки  так, чтобы сообщения выводились в заданном порядке.
# На выполнение кода установлено ограничение, его выполнение должно уложиться во временной промежуток от 0.1 до 1 секунды.

# Вывод который у вас должен получится:

# Первое сообщение от корутины 1
# Первое сообщение от корутины 2
# Первое сообщение от корутины 3
# Второе сообщение от корутины 3
# Второе сообщение от корутины 2
# Второе сообщение от корутины 1
# Третье сообщение от корутины 2
# Третье сообщение от корутины 3
# Третье сообщение от корутины 1
# Четвертое сообщение от корутины 1
# Четвертое сообщение от корутины 3
# Четвертое сообщение от корутины 2

# ссылка на задачу - https://stepik.org/lesson/933678/step/10?unit=939577

import asyncio

async def coroutine_1(delay=0.1):
    print("Первое сообщение от корутины 1")
    await asyncio.sleep(delay*2)  # Вторая задержка
    print("Второе сообщение от корутины 1")
    await asyncio.sleep(delay*2)  # Третья задержка
    print("Третье сообщение от корутины 1")
    await asyncio.sleep(0)
    print("Четвертое сообщение от корутины 1")
 
    
async def coroutine_2(delay=0.1):
    print("Первое сообщение от корутины 2")
    await asyncio.sleep(delay)  # Первая задержка
    print("Второе сообщение от корутины 2")
    await asyncio.sleep(delay)  # Вторая задержка
    print("Третье сообщение от корутины 2")
    await asyncio.sleep(delay*4)  # Третья задержка
    print("Четвертое сообщение от корутины 2")


async def coroutine_3(delay=0.1):
    print("Первое сообщение от корутины 3")
    await asyncio.sleep(0)
    print("Второе сообщение от корутины 3")
    await asyncio.sleep(delay*3)  # Вторая задержка
    print("Третье сообщение от корутины 3")
    await asyncio.sleep(delay*2)  # Третья задержка
    print("Четвертое сообщение от корутины 3")

async def main():
    await asyncio.gather(
        coroutine_1(),
        coroutine_2(),
        coroutine_3(),
    )

asyncio.run(main())