# Добавьте к предыдущей задаче три проверки состояния цикла событий, таким образом чтобы вывод соответствовал ожидаемому. Для этого допишите функцию check_loop_status(loop), таким образом, чтобы она возвращала следующее сообщение:

# return f'Цикл событий активен: {...}, Цикл событий закрыт: {...}.'
# Внутри фигурных скобок используйте методы проверки состояния цикла событий.

# Выведите на экран результат работы данной функции в трех местах кода таким образом, чтобы сообщения, выводимые на экран соответствовали сообщениям, представленным в конце условия задачи.

# Корутина main() должна выводить на экран сообщение: "Корутина завершена".
# Корутина должна быть запущена с помощью метода loop.run_until_complete().
# При создании цикла событий вручную, сохраните его в переменную loop.
# Допишите функцию check_loop_status(loop) и запустите ее в трех местах так, чтобы вывод соотвествовал ожидаемому. 
# Не забудьте закрыть цикл событий после завершения работы корутины. 

# ссылка на задачу - https://stepik.org/lesson/933692/step/8?unit=939591

import asyncio

def check_loop_status(loop):
    return f'Цикл событий активен: {loop.is_running()}, Цикл событий закрыт: {loop.is_closed()}.'

async def main():
    await asyncio.sleep(1)
    loop = asyncio.get_running_loop()
    print(check_loop_status(loop))
    print("Корутина завершена")
    

loop = asyncio.new_event_loop()
print(check_loop_status(loop))
asyncio.set_event_loop(loop)
loop.run_until_complete(main())
loop.close()
print(check_loop_status(loop))